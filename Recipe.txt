# Recipe Form Logic and Type Documentation

This document describes the structure and functionality of the `RecipeForm.tsx` component and its associated data types defined in `src/types.ts`.

---

## I. RecipeForm.tsx Logic Overview

The `RecipeForm` component is responsible for collecting all necessary information to define or edit a recipe. It uses React's `useState` for managing form inputs and interacts with the Zustand store (`useRecipeStore`) to add or update recipes.

### A. State Management (`useState` Hooks)

The component maintains various pieces of state to control the form fields:

* **Core Recipe Fields:**
    * `itemName` (string): The name of the crafted or acquired item.
    * `itemType` (string): The general category of the item (e.g., "Weapon", "Material").
    * `acquisitionType` (string): The primary method of acquiring the item (e.g., "blacksmithing", "mob_drop"). This is crucial as it dictates which additional fields are shown.

* **Acquisition-Specific Fields (Conditionally Rendered):**
    * `ingredients` (array of objects): Used for 'blacksmithing' recipes. Each object temporarily includes an `id` for React `key`ing during rendering, along with `name` and `quantity`.
    * `smithingSkillRequired` (number or empty string): For 'blacksmithing' recipes, optional.
    * `mobSources` (array of objects): Used for 'mob_drop' recipes. Each object temporarily includes an `id` for React `key`ing, along with `mobName` and `floor`.
    * `dropType` (string or empty string): For 'mob_drop' recipes, optional.
    * `itemWorth` (number or empty string): For 'merchant' recipes, optional.
    * `merchantLocation` (string or empty string): For 'merchant' recipes, optional.
    * `mineableFloor` (number or empty string): For 'mining' recipes, optional.

### B. Dynamic Input Handling (Ingredients / Mob Sources)

For acquisition types like 'blacksmithing' (ingredients) and 'mob_drop' (mob sources), the form allows adding and removing multiple entries dynamically.

* **`generateUniqueTempId()`:** This helper function generates simple, unique string IDs (e.g., "temp-0", "temp-1") for items added to `ingredients` or `mobSources` arrays. These IDs are *only* for React's `key` prop to efficiently manage list rendering and are removed before saving to the store.
* **`handleAddIngredient()` / `handleAddMobSource()`:** Appends a new, empty ingredient/mob source object (with a generated `id`) to the respective state array.
* **`handleRemoveIngredient()` / `handleRemoveMobSource()`:** Filters the state array to remove the item matching the given `id`.
* **`handleIngredientChange()` / `handleMobSourceChange()`:** Updates a specific field (e.g., `name`, `quantity`, `mobName`, `floor`) of an item in the state array, identified by its `id`.

### C. Acquisition Type Conditional Rendering

The form's JSX uses a `switch` statement based on the `acquisitionType` state to display only the relevant input fields for the selected acquisition method.
When `acquisitionType` changes, all acquisition-specific fields are reset to their initial empty states to prevent data from one type accidentally persisting to another.

### D. Form Submission (`handleSubmit`)

This function is triggered when the form is submitted.

1.  **Basic Validation:** Checks if core fields (`itemName`, `itemType`, `acquisitionType`) are filled. It also performs specific validations for `blacksmithing` (requires ingredients) and `mob_drop` (requires sources).
2.  **Acquisition Object Construction:** Based on `acquisitionType`, it constructs the correct `Acquisition` object, ensuring numerical fields are parsed (`Number()`) and optional empty strings become `undefined`.
    * **Crucially**, for `ingredients` and `mobSources`, it uses `.map(({ id, ...rest }) => rest)` to create new arrays that **exclude the temporary `id` property** before saving to the store.
3.  **Store Interaction:**
    * If `editingItemName` is present (meaning we are in edit mode), it calls `updateRecipe()` from `useRecipeStore`.
    * Otherwise, it calls `addRecipe()` from `useRecipeStore`.
4.  **Form Reset:** After successful submission, `handleResetForm()` is called to clear all form fields and reset the editing state in the parent component.

### E. Editing Feature (`useEffect`)

The `useEffect` hook handles loading recipe data into the form when `editingItemName` (a prop from `App.tsx`) changes.

* **Population:** If `editingItemName` is a non-null string, it finds the corresponding recipe in the `recipes` array from the Zustand store and populates all relevant form fields. When populating, temporary `id`s are generated for ingredients/mob sources to ensure React can render them correctly. The `tempIdCounter` is reset to 0 to provide fresh temporary IDs each time an edit is loaded.
* **Clearing:** If `editingItemName` becomes `null` (e.g., after an update or when "Cancel Edit" is clicked), the `resetAllFormFields()` function is called to clear the form, preparing it for a new recipe entry.

### F. Form Reset (`handleResetForm`, `resetAllFormFields`)

* `resetAllFormFields()`: An internal helper that sets all state variables back to their initial empty values. It also resets `tempIdCounter`.
* `handleResetForm()`: A public function called on form submission or by the "Cancel Edit" button. It calls `resetAllFormFields()` and then `onFormReset()` (a prop) to notify the parent `App.tsx` component to clear its `editingItemName` state, exiting edit mode.

---

## II. src/types.ts Definitions

This file defines the TypeScript interfaces that structure our recipe data, ensuring type safety throughout the application.

### A. `Recipe` Interface

This is the main interface for a single recipe entry.

```typescript
interface Recipe {
  itemName: string;         // The unique name of the item.
  itemType: string;         // General category (e.g., "Weapon", "Material").
  acquisition: Acquisition; // How the item is obtained (see Acquisition union type below).
}